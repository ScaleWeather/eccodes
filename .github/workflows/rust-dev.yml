name: cargodev

on: 
  push:
    branches-ignore:
      - main
  pull_request:
    branches:
      - "**"

env:
  CARGO_TERM_COLOR: always

jobs:
  pre_job:
    continue-on-error: true
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@v5
        with:
          # All of these options are optional, so you can remove them if you are happy with the defaults
          concurrent_skipping: 'same_content_newer'
          skip_after_successful_duplicate: 'true'
          paths_ignore: '["**/README.md"]'
          do_not_skip: '["pull_request", "workflow_dispatch", "schedule"]'

  build-linux:

    name: Build on Linux
    needs: pre_job
    if: needs.pre_job.outputs.should_skip != 'true'
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Prepare environment
      run: |
        sudo apt-get update
        sudo apt-get install clang
        sudo apt-get install libclang1
        sudo apt-get install libeccodes-dev
        rustup update stable
        cargo clean
    - name: Check with clippy
      run: |
        cargo clippy --features "experimental_index, message_ndarray"
    - name: Build release
      run: |
        cargo build --release --features "experimental_index, message_ndarray"
    - name: Test with cargo
      run: |
        cargo clean
        RUST_BACKTRACE=full cargo test --features "experimental_index, message_ndarray" -- --include-ignored

  build-macos:

    name: Build on MacOS
    needs: pre_job
    if: needs.pre_job.outputs.should_skip != 'true'
    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v4
    - name: Prepare environment
      run: |
        brew install eccodes
        rustup update stable
        cargo clean
    - name: Test with cargo
      run: |
        RUST_BACKTRACE=full cargo test --features "experimental_index, message_ndarray" -- --include-ignored
    - name: Check with clippy
      run: |
        cargo clippy --features "experimental_index, message_ndarray"
    - name: Build release
      run: |
        cargo build --release --features "experimental_index, message_ndarray"
